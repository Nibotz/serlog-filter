<!DOCTYPE html>
<html>
<head>
    <title>filter test</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="jquery/jquery-3.6.3.min.js"></script>
    <script src="jquery/jstree.min.js"></script>
    <link rel="stylesheet" href="dist/style.min.css">
    <link rel="stylesheet" href="css/filter_styles.css">
</head>
<body>


<div id="tab-button-holder">
    <h2>Tabs</h2>
    <button class="open-tab" id="open-tab-main">services</button>
    <!-- new tab buttons here -->
</div>

<div id="tab-holder">
    <div class="tab" id="tab-main">
        <div id="service-holder">
            <!-- services shown here -->
        </div>
        <div id="filter-holder">
            <h2>Filters</h2>
            <div class="filter">
                <h3>Service available</h3>
                <input type="checkbox" name="available" value="locally"> Locally
                <input type="checkbox" name="available" value="online"> Online
            </div>
            <div class="filter">
                <h3>Price(&euro;)</h3>
                <input type="number" name="price1">
                <span>-</span>
                <input type="number" name="price2">
            </div>
            <div class="filter">
                <h3>Created between</h3>
                <input type="date" name="created1">
                <span>-</span>
                <input type="date" name="created2">
        
                <h3>Edited between</h3>
                <input type="date" name="edited1">
                <span>-</span>
                <input type="date" name="edited2">
            </div>
            <div class="filter">
                <h3>Categories</h3>
                <input type="checkbox" id="selectAll">
                <span id="selectAll-text"></span>
                <div id="tree-filter">
                    <!-- tree filter shown here -->
                </div>
            </div>
            <br>
        </div>
    </div>
    <!-- new tabs here -->
</div>

<script>
$(document).ready(function(){
    // get url parameters
    const url = new URLSearchParams(location.search);
    // intalize (infinite scroll) variables (doesn't work D:)
    const LOAD_LIMIT = 20;
    var loaded = 0;
    var max_loaded = false;
    // intalize tab variables
    var current_tab = url.has("current_tab") ? url.get("current_tab") : "main";
    var other_tabs = url.has("other_tabs") ? url.get("other_tabs").split(",") : [];
    // MAIN TAB
    // tree filter intalized
    $("#tree-filter").jstree({
        "core": {
            "data": {
                "method": "POST",
                "data": {
                    "get_data": 1
                },
                "url": "make_tree.php",
                "dataType": "json"
            }
        },
        "plugins": ["checkbox", "wholerow"],
        "checkbox": {
            "keep_selected_style": 0
        }
    });
    const tree_filter = $("#tree-filter").jstree();
    // other filters intalized (after tree filter)
    $("#tree-filter").on("ready.jstree", function(){
        filter_change();
    });
    // OTHER TABS
    // current tab
    if (current_tab != "main") {
        create_tabs([current_tab], current_tab);
    } else {
        open_tab("main", true);
    }
    // closed tabs
    if (other_tabs.length > 0) {
        create_tabs(other_tabs, null);
    }
    // FILTERS + SERVICES
    // change filter
    function filter_change(new_filters=true){
        if (new_filters) {
            loaded = 0;
            max_loaded = false;
            $(document).scrollTop(0);
        }
        // arrays are made
        let locality = [];
        $("input[name='available']:checked").each(function(){
            locality.push(this.value);
        });
        let categories = tree_filter.get_selected();
        // ajax call
        $.ajax({
            url: "filter_services.php",
            method: "POST",
            data: {
                get_data: 1,
                load_start: loaded,
                load_limit: LOAD_LIMIT,
                locality: locality,
                categories: JSON.stringify(categories).slice(1, -1),
                price1: $("input[name='price1']").val(),
                price2: $("input[name='price2']").val(),
                created1: $("input[name='created1']").val(),
                created2: $("input[name='created2']").val(),
                edited1: $("input[name='edited1']").val(),
                edited2: $("input[name='edited2']").val()
            },
            success:function(rText){
                html = process_services(rText);
                if (html === "") {
                    max_loaded = true;
                    if (new_filters) {
                        $("#service-holder").html("<p class='empty'>*No data found</p>");
                    }
                } else {
                    if (new_filters) {
                        $("#service-holder").html(html);
                    } else {
                        $("#service-holder").append(html);
                    }
                    loaded += LOAD_LIMIT;
                }
                // get service presses
                $("div.service").on("click", function(){
                    new_tab(this.id.slice(4));
                });
            }
        });
    }
    // process services
    function process_services(json_filters){
        let services = JSON.parse(json_filters);
        let html = "";
        // count services
        let service_count = [];
        $.each(tree_filter.get_json("#", {flat: true}), function(){
            service_count[this.id] = 0;
            // remove count from the end
            let p = this.text.search(" \\(");
            if (p != -1) {
                tree_filter.set_text(this, this.text.slice(0, p));
            }
        });
        // loop trough services
        $.each(services, function(){
            service_count[this.cat_id]++; // count services by category id
            // style services
            html += "<div class='service' id='ser-" + this.id + "'>"; // div start
            html += "<h3 class='service-name'>" + this.title + "</h3>"; // title
            html += "<p><b>categorization:</b> "; // category start
            if (this.cat_id == null) {
                html += "none"; // no category
            } else {
                html += tree_filter.get_path(this.cat_id, " --> "); // category tree
            }
            html += "</p><br>"; // category end
            html += "<p><b>created:</b> " + this.created + "</p>"; // created
            html += "<p><b>edited:</b> " + this.edited + "</p>"; // edited
            html += "<p><b>locality:</b> " + this.locality_csv.replace(/_/g, "") + "</p>"; // locality
            html += "<p><b>price:</b> "; // price start
            if (this.minprice === null) {
                html += "none"; // no price
            } else if (this.minprice == this.maxprice) {
                html += this.minprice + " &euro;"; // same price
            } else {
                html += this.minprice + " - " + this.maxprice + " &euro;"; // price range
            }
            html += "</p>"; // price end
            html += "</div>"; // div end
        });
        // add child services to count
        function add_childs(node){
            let child_count = 0;
            $.each(node.children, function(){
                child_count += add_childs(this);
            });
            let num = service_count[node.id] += child_count;
            tree_filter.set_text(node, node.text + " (" + num + ")");
            return num;
        }
        let num = 0;
        $.each(tree_filter.get_json(), function(){
            num += add_childs(this);
        });
        $("#selectAll-text").html("Select all (" + num + ")");
        // return styled services
        return html;
    }
    // BUTTON ACTION
    // select all button
    $("#selectAll").change(function(){
        if ($(this).is(":checked")) {
            tree_filter.check_all();
        } else {
            tree_filter.uncheck_all();
        }
    })
    // get filter change
    $("input").change(function(){
        filter_change();
    });
    // get tree filter change
    $("#tree-filter").on("changed.jstree", function(n, e){
        if (e.action === "select_node" || e.action === "deselect_node") {
            filter_change();
        }
    }).jstree();
    // get when scrolled to bottom (broken currently)
    /*$(window).scroll(function(){
        if(!max_loaded && $(document).height() - $(window).height() - $(window).scrollTop() < 1) {
            filter_change(false);
        }
    });*/
    // TAB MAKING STUFF
    // create new tab
    function create_tabs(ids, tab_to_open) {
        $.ajax({
            url: "service_information.php",
            method: "POST",
            data: {
                get_data: 1,
                ids: (ids + "")
            },
            success:function(rText) {
                let sdata = JSON.parse(rText);
                let html = "";
                // style each tab
                $.each(sdata, function() {
                    html += "<div class='tab service-tab' id='tab-" + this.id + "'>";
                    html += "<h2>" + this.title + "</h2>";
                    html += "</div>";
                });
                // append new tabs
                $("#tab-holder").append(html);
                // make buttons for each tab
                $.each(sdata, function() {
                    let id = this.id;
                    // tab buttons made
                    let tab = $("<button class='open-tab' id='open-tab-" + id + "'></button>").text("tab " + id); // tab button
                    let del = $("<button class='del-tab' id='del-tab-" + id + "'></button>").text("X"); // delete button
                    // delete tab event
                    $(del).on("click", function(){
                        $(del).remove();
                        $(tab).slideUp("fast", function(){
                            other_tabs.splice(other_tabs.indexOf(id), 1);
                            if (id == current_tab) {
                                open_tab("main");
                            } else {
                                update_url();
                            }
                            $(tab).remove();
                            $("#tab-" + id).remove();
                        });
                    });
                    // open tab event
                    $(tab).on("click", function(){
                        open_tab(id);
                    });
                    // add new buttons
                    $("#tab-button-holder").append(tab, del);
                });
                if (tab_to_open !== null) {
                    open_tab(tab_to_open, true);
                }
            }
        });
    }
    // handle greating new tab
    function new_tab(id) {
        if (current_tab != id && !other_tabs.includes(id)) {
            create_tabs([id], id);
        } else {
            open_tab(id);
        }
    };
    // opening main tab
    $("#open-tab-main").on("click", function(){
        open_tab("main");
    });
    // handle changing tab
    function open_tab(id, forced=false) {
        if (current_tab != id || forced) {
            // old tab
            if ($("#open-tab-" + current_tab).hasClass("active-tab")) {
                $("#tab-" + current_tab).removeClass("active-tab");
                $("#open-tab-" + current_tab).removeClass("active-tab");
                if (current_tab != "main") {
                    other_tabs.push(current_tab);
                }
            }
            // new tab
            $("#tab-" + id).addClass("active-tab");
            $("#open-tab-" + id).addClass("active-tab");
            if (other_tabs.includes(id)) {
                other_tabs.splice(other_tabs.indexOf(id), 1);
            }
            current_tab = id;
            update_url();
        }
    }
    // update url
    function update_url() {
        let par = new URLSearchParams(location.search);
        par.set("current_tab", current_tab);
        if (other_tabs.length == 0) {
            par.delete("other_tabs");
        } else {
            par.set("other_tabs", other_tabs + "");
        }
        history.pushState({}, "", ".?" + par.toString());
    }
});

</script>

</body>
</html>
